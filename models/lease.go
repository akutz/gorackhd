package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*lease Lease lease

swagger:model lease
*/
type Lease struct {

	/* BoundFlag bound flag
	 */
	BoundFlag *bool `json:"boundFlag,omitempty"`

	/* ExpirationTimer expiration timer
	 */
	ExpirationTimer int32 `json:"expirationTimer,omitempty"`

	/* IPAddress ip address

	Required: true
	*/
	IPAddress string `json:"ipAddress,omitempty"`

	/* LeaseExpiresAt lease expires at
	 */
	LeaseExpiresAt int64 `json:"leaseExpiresAt,omitempty"`

	/* Mac mac

	Required: true
	*/
	Mac string `json:"mac,omitempty"`

	/* RebindExpiresAt rebind expires at
	 */
	RebindExpiresAt int64 `json:"rebindExpiresAt,omitempty"`

	/* RebindingTimer rebinding timer
	 */
	RebindingTimer int32 `json:"rebindingTimer,omitempty"`

	/* RenewalExpiresAt renewal expires at
	 */
	RenewalExpiresAt int64 `json:"renewalExpiresAt,omitempty"`

	/* RenewalTimer renewal timer
	 */
	RenewalTimer int32 `json:"renewalTimer,omitempty"`

	/* ReservationExpiresAt reservation expires at
	 */
	ReservationExpiresAt int64 `json:"reservationExpiresAt,omitempty"`

	/* ReservationTimer reservation timer
	 */
	ReservationTimer int32 `json:"reservationTimer,omitempty"`

	/* ReserveTimer reserve timer
	 */
	ReserveTimer int64 `json:"reserveTimer,omitempty"`

	/* ReservedFlag reserved flag
	 */
	ReservedFlag *bool `json:"reservedFlag,omitempty"`
}

// Validate validates this lease
func (m *Lease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lease) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", string(m.IPAddress)); err != nil {
		return err
	}

	return nil
}

func (m *Lease) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", string(m.Mac)); err != nil {
		return err
	}

	return nil
}
