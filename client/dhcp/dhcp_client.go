package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new dhcp API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*get list of all catalogs

Delete the lease for the mac specified and return information about deleted lease.

*/
func (a *Client) DeleteDhcpLeaseMac(params *DeleteDhcpLeaseMacParams) (*DeleteDhcpLeaseMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpLeaseMacParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteDhcpLeaseMac",
		Params: params,
		Reader: &DeleteDhcpLeaseMacReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpLeaseMacOK), nil
}

/*Remove a whitelist of specified mac address


Remove a whitelist of specified mac address

*/
func (a *Client) DeleteNodesMacaddressDhcpWhitelist(params *DeleteNodesMacaddressDhcpWhitelistParams) (*DeleteNodesMacaddressDhcpWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesMacaddressDhcpWhitelist",
		Params: params,
		Reader: &DeleteNodesMacaddressDhcpWhitelistReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesMacaddressDhcpWhitelistNoContent), nil
}

/*get DHCP lease table


Fetch the dhcp leases.

*/
func (a *Client) GetDhcp(params *GetDhcpParams) (*GetDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetDhcp",
		Params: params,
		Reader: &GetDhcpReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpOK), nil
}

/*fetch lease information for the mac specified


Fetch lease information for the mac specified.

*/
func (a *Client) GetDhcpLeaseMac(params *GetDhcpLeaseMacParams) (*GetDhcpLeaseMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpLeaseMacParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetDhcpLeaseMac",
		Params: params,
		Reader: &GetDhcpLeaseMacReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpLeaseMacOK), nil
}

/*Add a whitelist of specified mac address


Add a whitelist of specified mac address

*/
func (a *Client) PostNodesMacaddressDhcpWhitelist(params *PostNodesMacaddressDhcpWhitelistParams) (*PostNodesMacaddressDhcpWhitelistCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesMacaddressDhcpWhitelist",
		Params: params,
		Reader: &PostNodesMacaddressDhcpWhitelistReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesMacaddressDhcpWhitelistCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
