package skus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new skus API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skus API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*get list of skus


get list of skus

*/
func (a *Client) GetSkus(params *GetSkusParams) (*GetSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetSkus",
		Params: params,
		Reader: &GetSkusReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusOK), nil
}

/*get a single sku


get a single sku

*/
func (a *Client) GetSkusIdentifier(params *GetSkusIdentifierParams) (*GetSkusIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetSkusIdentifier",
		Params: params,
		Reader: &GetSkusIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusIdentifierOK), nil
}

/*get nodes for specific sku


get nodes for specific sku

*/
func (a *Client) GetSkusIdentifierNodes(params *GetSkusIdentifierNodesParams) (*GetSkusIdentifierNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusIdentifierNodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetSkusIdentifierNodes",
		Params: params,
		Reader: &GetSkusIdentifierNodesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusIdentifierNodesOK), nil
}

/*patch a single sku


patch a single sku

*/
func (a *Client) PatchSkusIdentifier(params *PatchSkusIdentifierParams) (*PatchSkusIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSkusIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PatchSkusIdentifier",
		Params: params,
		Reader: &PatchSkusIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSkusIdentifierOK), nil
}

/*create a sku


create a sku

*/
func (a *Client) PostSkus(params *PostSkusParams) (*PostSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSkusParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostSkus",
		Params: params,
		Reader: &PostSkusReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSkusOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
