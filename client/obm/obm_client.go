package obm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new obm API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for obm API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*get the obm settings associated with a node.


get the obm settings associated with a node.

*/
func (a *Client) GetNodesIdentifierObm(params *GetNodesIdentifierObmParams) (*GetNodesIdentifierObmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierObmParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierObm",
		Params: params,
		Reader: &GetNodesIdentifierObmReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierObmOK), nil
}

/*Fetch status of identify light on node through OBM (if supported)


Fetch status of identify light on node through OBM (if supported)

*/
func (a *Client) GetNodesIdentifierObmIdentify(params *GetNodesIdentifierObmIdentifyParams) (*GetNodesIdentifierObmIdentifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierObmIdentifyParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierObmIdentify",
		Params: params,
		Reader: &GetNodesIdentifierObmIdentifyReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierObmIdentifyOK), nil
}

/*set the obm settings associated with a node.


set he obm settings associated with a node.

*/
func (a *Client) PostNodesIdentifierObm(params *PostNodesIdentifierObmParams) (*PostNodesIdentifierObmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierObm",
		Params: params,
		Reader: &PostNodesIdentifierObmReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmCreated), nil
}

/*Enable or disable identify light on node through OBM (if supported)


Enable or disable identify light on node through OBM (if supported)

*/
func (a *Client) PostNodesIdentifierObmIdentify(params *PostNodesIdentifierObmIdentifyParams) (*PostNodesIdentifierObmIdentifyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmIdentifyParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierObmIdentify",
		Params: params,
		Reader: &PostNodesIdentifierObmIdentifyReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmIdentifyCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
