package workflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/emccode/gorackhd/models"
)

type DeleteNodesIdentifierWorkflowsActiveReader struct {
	formats strfmt.Registry
}

func (o *DeleteNodesIdentifierWorkflowsActiveReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteNodesIdentifierWorkflowsActiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteNodesIdentifierWorkflowsActiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteNodesIdentifierWorkflowsActiveDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewDeleteNodesIdentifierWorkflowsActiveOK creates a DeleteNodesIdentifierWorkflowsActiveOK with default headers values
func NewDeleteNodesIdentifierWorkflowsActiveOK() *DeleteNodesIdentifierWorkflowsActiveOK {
	return &DeleteNodesIdentifierWorkflowsActiveOK{}
}

/*DeleteNodesIdentifierWorkflowsActiveOK

Canceled workflows for specified node

*/
type DeleteNodesIdentifierWorkflowsActiveOK struct {
	Payload DeleteNodesIdentifierWorkflowsActiveOKBodyBody
}

func (o *DeleteNodesIdentifierWorkflowsActiveOK) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/workflows/active][%d] deleteNodesIdentifierWorkflowsActiveOK  %+v", 200, o.Payload)
}

func (o *DeleteNodesIdentifierWorkflowsActiveOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteNodesIdentifierWorkflowsActiveNotFound creates a DeleteNodesIdentifierWorkflowsActiveNotFound with default headers values
func NewDeleteNodesIdentifierWorkflowsActiveNotFound() *DeleteNodesIdentifierWorkflowsActiveNotFound {
	return &DeleteNodesIdentifierWorkflowsActiveNotFound{}
}

/*DeleteNodesIdentifierWorkflowsActiveNotFound

The node with the identifier was not found

*/
type DeleteNodesIdentifierWorkflowsActiveNotFound struct {
	Payload *models.Error
}

func (o *DeleteNodesIdentifierWorkflowsActiveNotFound) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/workflows/active][%d] deleteNodesIdentifierWorkflowsActiveNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNodesIdentifierWorkflowsActiveNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewDeleteNodesIdentifierWorkflowsActiveDefault creates a DeleteNodesIdentifierWorkflowsActiveDefault with default headers values
func NewDeleteNodesIdentifierWorkflowsActiveDefault(code int) *DeleteNodesIdentifierWorkflowsActiveDefault {
	return &DeleteNodesIdentifierWorkflowsActiveDefault{
		_statusCode: code,
	}
}

/*DeleteNodesIdentifierWorkflowsActiveDefault

Unexpected error
*/
type DeleteNodesIdentifierWorkflowsActiveDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete nodes identifier workflows active default response
func (o *DeleteNodesIdentifierWorkflowsActiveDefault) Code() int {
	return o._statusCode
}

func (o *DeleteNodesIdentifierWorkflowsActiveDefault) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/workflows/active][%d] DeleteNodesIdentifierWorkflowsActive default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteNodesIdentifierWorkflowsActiveDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*DeleteNodesIdentifierWorkflowsActiveOKBodyBody DeleteNodesIdentifierWorkflowsActiveOKBodyBody delete nodes identifier workflows active o k body body

swagger:model DeleteNodesIdentifierWorkflowsActiveOKBodyBody
*/
type DeleteNodesIdentifierWorkflowsActiveOKBodyBody interface{}
