package workflow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new workflow API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Cancel currently running workflows for specified node


Cancel currently running workflows for specified node

*/
func (a *Client) DeleteNodesIdentifierWorkflowsActive(params *DeleteNodesIdentifierWorkflowsActiveParams) (*DeleteNodesIdentifierWorkflowsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesIdentifierWorkflowsActiveParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesIdentifierWorkflowsActive",
		Params: params,
		Reader: &DeleteNodesIdentifierWorkflowsActiveReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesIdentifierWorkflowsActiveOK), nil
}

/*Fetch all workflows for specified node


Fetch all workflows for specified node

*/
func (a *Client) GetNodesIdentifierWorkflows(params *GetNodesIdentifierWorkflowsParams) (*GetNodesIdentifierWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierWorkflows",
		Params: params,
		Reader: &GetNodesIdentifierWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierWorkflowsOK), nil
}

/*Fetch currently running workflows for specified node


Fetch currently running workflows for specified node

*/
func (a *Client) GetNodesIdentifierWorkflowsActive(params *GetNodesIdentifierWorkflowsActiveParams) (*GetNodesIdentifierWorkflowsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierWorkflowsActiveParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierWorkflowsActive",
		Params: params,
		Reader: &GetNodesIdentifierWorkflowsActiveReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierWorkflowsActiveOK), nil
}

/*Fetch workflows


Fetch workflows

*/
func (a *Client) GetWorkflows(params *GetWorkflowsParams) (*GetWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetWorkflows",
		Params: params,
		Reader: &GetWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsOK), nil
}

/*List all workflows available to run


List all workflows available to run

*/
func (a *Client) GetWorkflowsLibrary(params *GetWorkflowsLibraryParams) (*GetWorkflowsLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsLibraryParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetWorkflowsLibrary",
		Params: params,
		Reader: &GetWorkflowsLibraryReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsLibraryOK), nil
}

/*Fetch tasks from task library


Fetch tasks from task library

*/
func (a *Client) GetWorkflowsTasks(params *GetWorkflowsTasksParams) (*GetWorkflowsTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsTasksParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetWorkflowsTasks",
		Params: params,
		Reader: &GetWorkflowsTasksReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWorkflowsTasksOK), nil
}

/*create workflow for specified node


create workflow for specified node

*/
func (a *Client) PostNodesIdentifierWorkflows(params *PostNodesIdentifierWorkflowsParams) (*PostNodesIdentifierWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierWorkflows",
		Params: params,
		Reader: &PostNodesIdentifierWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierWorkflowsOK), nil
}

/*define new workflow


define new workflow

*/
func (a *Client) PutWorkflows(params *PutWorkflowsParams) (*PutWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PutWorkflows",
		Params: params,
		Reader: &PutWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWorkflowsOK), nil
}

/*Add tasks to task library


Add tasks to task library

*/
func (a *Client) PutWorkflowsTasks(params *PutWorkflowsTasksParams) (*PutWorkflowsTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutWorkflowsTasksParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PutWorkflowsTasks",
		Params: params,
		Reader: &PutWorkflowsTasksReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutWorkflowsTasksOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
