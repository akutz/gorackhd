package delete

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new delete API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for delete API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*get list of all catalogs

Delete the lease for the mac specified and return information about deleted lease.

*/
func (a *Client) DeleteDhcpLeaseMac(params *DeleteDhcpLeaseMacParams) (*DeleteDhcpLeaseMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpLeaseMacParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteDhcpLeaseMac",
		Params: params,
		Reader: &DeleteDhcpLeaseMacReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpLeaseMacOK), nil
}

/*delete file based on uuid


Put file based on filename, returns the uuid of the stored file.

*/
func (a *Client) DeleteFilesFileidentifier(params *DeleteFilesFileidentifierParams) (*DeleteFilesFileidentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesFileidentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteFilesFileidentifier",
		Params: params,
		Reader: &DeleteFilesFileidentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFilesFileidentifierNoContent), nil
}

/*Delete specified node.


Delete specified node.

*/
func (a *Client) DeleteNodesIdentifier(params *DeleteNodesIdentifierParams) (*DeleteNodesIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesIdentifier",
		Params: params,
		Reader: &DeleteNodesIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesIdentifierOK), nil
}

/*Cancel currently running workflows for specified node


Cancel currently running workflows for specified node

*/
func (a *Client) DeleteNodesIdentifierWorkflowsActive(params *DeleteNodesIdentifierWorkflowsActiveParams) (*DeleteNodesIdentifierWorkflowsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesIdentifierWorkflowsActiveParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesIdentifierWorkflowsActive",
		Params: params,
		Reader: &DeleteNodesIdentifierWorkflowsActiveReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesIdentifierWorkflowsActiveOK), nil
}

/*Remove a whitelist of specified mac address


Remove a whitelist of specified mac address

*/
func (a *Client) DeleteNodesMacaddressDhcpWhitelist(params *DeleteNodesMacaddressDhcpWhitelistParams) (*DeleteNodesMacaddressDhcpWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesMacaddressDhcpWhitelist",
		Params: params,
		Reader: &DeleteNodesMacaddressDhcpWhitelistReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesMacaddressDhcpWhitelistNoContent), nil
}

/*delete the specified poller


delete the specified poller

*/
func (a *Client) DeletePollersIdentifier(params *DeletePollersIdentifierParams) (*DeletePollersIdentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePollersIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeletePollersIdentifier",
		Params: params,
		Reader: &DeletePollersIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePollersIdentifierNoContent), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
