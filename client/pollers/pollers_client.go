package pollers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new pollers API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pollers API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*delete the specified poller


delete the specified poller

*/
func (a *Client) DeletePollersIdentifier(params *DeletePollersIdentifierParams) (*DeletePollersIdentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePollersIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeletePollersIdentifier",
		Params: params,
		Reader: &DeletePollersIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePollersIdentifierNoContent), nil
}

/*Fetch all pollers for specified node


Fetch all pollers for specified node

*/
func (a *Client) GetNodesIdentifierPollers(params *GetNodesIdentifierPollersParams) (*GetNodesIdentifierPollersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierPollersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierPollers",
		Params: params,
		Reader: &GetNodesIdentifierPollersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierPollersOK), nil
}

/*get list of all pollers


get list of all pollers

*/
func (a *Client) GetPollers(params *GetPollersParams) (*GetPollersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetPollers",
		Params: params,
		Reader: &GetPollersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersOK), nil
}

/*Get specifics of the specified poller


Get specifics of the specified poller

*/
func (a *Client) GetPollersIdentifier(params *GetPollersIdentifierParams) (*GetPollersIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetPollersIdentifier",
		Params: params,
		Reader: &GetPollersIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersIdentifierOK), nil
}

/*get list of possible library pollers


get list of possible library pollers

*/
func (a *Client) GetPollersLibrary(params *GetPollersLibraryParams) (*GetPollersLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersLibraryParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetPollersLibrary",
		Params: params,
		Reader: &GetPollersLibraryReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersLibraryOK), nil
}

/*get a single library poller


get a single library poller

*/
func (a *Client) GetPollersLibraryIdentifier(params *GetPollersLibraryIdentifierParams) (*GetPollersLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetPollersLibraryIdentifier",
		Params: params,
		Reader: &GetPollersLibraryIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersLibraryIdentifierOK), nil
}

/*patch specifics of the specified poller


patch specifics of the specified poller

*/
func (a *Client) PatchPollersIdentifier(params *PatchPollersIdentifierParams) (*PatchPollersIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPollersIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PatchPollersIdentifier",
		Params: params,
		Reader: &PatchPollersIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPollersIdentifierOK), nil
}

/*create a poller


create a poller

*/
func (a *Client) PostPollers(params *PostPollersParams) (*PostPollersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPollersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostPollers",
		Params: params,
		Reader: &PostPollersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPollersOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
