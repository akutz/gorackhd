package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new nodes API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Delete specified node.


Delete specified node.

*/
func (a *Client) DeleteNodesIdentifier(params *DeleteNodesIdentifierParams) (*DeleteNodesIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesIdentifier",
		Params: params,
		Reader: &DeleteNodesIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesIdentifierOK), nil
}

/*Cancel currently running workflows for specified node


Cancel currently running workflows for specified node

*/
func (a *Client) DeleteNodesIdentifierWorkflowsActive(params *DeleteNodesIdentifierWorkflowsActiveParams) (*DeleteNodesIdentifierWorkflowsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesIdentifierWorkflowsActiveParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesIdentifierWorkflowsActive",
		Params: params,
		Reader: &DeleteNodesIdentifierWorkflowsActiveReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesIdentifierWorkflowsActiveOK), nil
}

/*Remove a whitelist of specified mac address


Remove a whitelist of specified mac address

*/
func (a *Client) DeleteNodesMacaddressDhcpWhitelist(params *DeleteNodesMacaddressDhcpWhitelistParams) (*DeleteNodesMacaddressDhcpWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "DeleteNodesMacaddressDhcpWhitelist",
		Params: params,
		Reader: &DeleteNodesMacaddressDhcpWhitelistReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesMacaddressDhcpWhitelistNoContent), nil
}

/*List of all nodes or if there are none an empty object


List of all nodes or if there are none an empty object

*/
func (a *Client) GetNodes(params *GetNodesParams) (*GetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodes",
		Params: params,
		Reader: &GetNodesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesOK), nil
}

/*List of all nodes or if there are none an empty object


List of all nodes or if there are none an empty object

*/
func (a *Client) GetNodesIdentifier(params *GetNodesIdentifierParams) (*GetNodesIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifier",
		Params: params,
		Reader: &GetNodesIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierOK), nil
}

/*Fetch catalog of specified node


Fetch catalog of specified node

*/
func (a *Client) GetNodesIdentifierCatalogs(params *GetNodesIdentifierCatalogsParams) (*GetNodesIdentifierCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierCatalogsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierCatalogs",
		Params: params,
		Reader: &GetNodesIdentifierCatalogsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierCatalogsOK), nil
}

/*Fetch catalog of specified node for given source


Fetch catalog of specified node for given source

*/
func (a *Client) GetNodesIdentifierCatalogsSource(params *GetNodesIdentifierCatalogsSourceParams) (*GetNodesIdentifierCatalogsSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierCatalogsSourceParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierCatalogsSource",
		Params: params,
		Reader: &GetNodesIdentifierCatalogsSourceReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierCatalogsSourceOK), nil
}

/*get the obm settings associated with a node.


get the obm settings associated with a node.

*/
func (a *Client) GetNodesIdentifierObm(params *GetNodesIdentifierObmParams) (*GetNodesIdentifierObmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierObmParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierObm",
		Params: params,
		Reader: &GetNodesIdentifierObmReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierObmOK), nil
}

/*Fetch status of identify light on node through OBM (if supported)


Fetch status of identify light on node through OBM (if supported)

*/
func (a *Client) GetNodesIdentifierObmIdentify(params *GetNodesIdentifierObmIdentifyParams) (*GetNodesIdentifierObmIdentifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierObmIdentifyParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierObmIdentify",
		Params: params,
		Reader: &GetNodesIdentifierObmIdentifyReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierObmIdentifyOK), nil
}

/*Fetch all pollers for specified node


Fetch all pollers for specified node

*/
func (a *Client) GetNodesIdentifierPollers(params *GetNodesIdentifierPollersParams) (*GetNodesIdentifierPollersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierPollersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierPollers",
		Params: params,
		Reader: &GetNodesIdentifierPollersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierPollersOK), nil
}

/*Fetch all workflows for specified node


Fetch all workflows for specified node

*/
func (a *Client) GetNodesIdentifierWorkflows(params *GetNodesIdentifierWorkflowsParams) (*GetNodesIdentifierWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierWorkflows",
		Params: params,
		Reader: &GetNodesIdentifierWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierWorkflowsOK), nil
}

/*Fetch currently running workflows for specified node


Fetch currently running workflows for specified node

*/
func (a *Client) GetNodesIdentifierWorkflowsActive(params *GetNodesIdentifierWorkflowsActiveParams) (*GetNodesIdentifierWorkflowsActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesIdentifierWorkflowsActiveParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetNodesIdentifierWorkflowsActive",
		Params: params,
		Reader: &GetNodesIdentifierWorkflowsActiveReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesIdentifierWorkflowsActiveOK), nil
}

/*get nodes for specific sku


get nodes for specific sku

*/
func (a *Client) GetSkusIdentifierNodes(params *GetSkusIdentifierNodesParams) (*GetSkusIdentifierNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusIdentifierNodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetSkusIdentifierNodes",
		Params: params,
		Reader: &GetSkusIdentifierNodesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusIdentifierNodesOK), nil
}

/*Patch specified node


Patch specified node

*/
func (a *Client) PatchNodesIdentifier(params *PatchNodesIdentifierParams) (*PatchNodesIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNodesIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PatchNodesIdentifier",
		Params: params,
		Reader: &PatchNodesIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchNodesIdentifierOK), nil
}

/*post


post

*/
func (a *Client) PostNodes(params *PostNodesParams) (*PostNodesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodes",
		Params: params,
		Reader: &PostNodesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesCreated), nil
}

/*set the obm settings associated with a node.


set he obm settings associated with a node.

*/
func (a *Client) PostNodesIdentifierObm(params *PostNodesIdentifierObmParams) (*PostNodesIdentifierObmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierObm",
		Params: params,
		Reader: &PostNodesIdentifierObmReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmCreated), nil
}

/*Enable or disable identify light on node through OBM (if supported)


Enable or disable identify light on node through OBM (if supported)

*/
func (a *Client) PostNodesIdentifierObmIdentify(params *PostNodesIdentifierObmIdentifyParams) (*PostNodesIdentifierObmIdentifyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmIdentifyParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierObmIdentify",
		Params: params,
		Reader: &PostNodesIdentifierObmIdentifyReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmIdentifyCreated), nil
}

/*create workflow for specified node


create workflow for specified node

*/
func (a *Client) PostNodesIdentifierWorkflows(params *PostNodesIdentifierWorkflowsParams) (*PostNodesIdentifierWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierWorkflowsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesIdentifierWorkflows",
		Params: params,
		Reader: &PostNodesIdentifierWorkflowsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierWorkflowsOK), nil
}

/*Add a whitelist of specified mac address


Add a whitelist of specified mac address

*/
func (a *Client) PostNodesMacaddressDhcpWhitelist(params *PostNodesMacaddressDhcpWhitelistParams) (*PostNodesMacaddressDhcpWhitelistCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostNodesMacaddressDhcpWhitelist",
		Params: params,
		Reader: &PostNodesMacaddressDhcpWhitelistReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesMacaddressDhcpWhitelistCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
