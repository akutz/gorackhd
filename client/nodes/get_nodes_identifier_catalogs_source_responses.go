package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/emccode/gorackhd/models"
)

type GetNodesIdentifierCatalogsSourceReader struct {
	formats strfmt.Registry
}

func (o *GetNodesIdentifierCatalogsSourceReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNodesIdentifierCatalogsSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetNodesIdentifierCatalogsSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetNodesIdentifierCatalogsSourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetNodesIdentifierCatalogsSourceOK creates a GetNodesIdentifierCatalogsSourceOK with default headers values
func NewGetNodesIdentifierCatalogsSourceOK() *GetNodesIdentifierCatalogsSourceOK {
	return &GetNodesIdentifierCatalogsSourceOK{}
}

/*GetNodesIdentifierCatalogsSourceOK

specific source catalog of specified node, |
empty object if none exist.

*/
type GetNodesIdentifierCatalogsSourceOK struct {
	Payload GetNodesIdentifierCatalogsSourceOKBodyBody
}

func (o *GetNodesIdentifierCatalogsSourceOK) Error() string {
	return fmt.Sprintf("[GET /nodes/{identifier}/catalogs/{source}][%d] getNodesIdentifierCatalogsSourceOK  %+v", 200, o.Payload)
}

func (o *GetNodesIdentifierCatalogsSourceOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil {
		return err
	}

	return nil
}

// NewGetNodesIdentifierCatalogsSourceNotFound creates a GetNodesIdentifierCatalogsSourceNotFound with default headers values
func NewGetNodesIdentifierCatalogsSourceNotFound() *GetNodesIdentifierCatalogsSourceNotFound {
	return &GetNodesIdentifierCatalogsSourceNotFound{}
}

/*GetNodesIdentifierCatalogsSourceNotFound

The node with the identifier was not found

*/
type GetNodesIdentifierCatalogsSourceNotFound struct {
	Payload *models.Error
}

func (o *GetNodesIdentifierCatalogsSourceNotFound) Error() string {
	return fmt.Sprintf("[GET /nodes/{identifier}/catalogs/{source}][%d] getNodesIdentifierCatalogsSourceNotFound  %+v", 404, o.Payload)
}

func (o *GetNodesIdentifierCatalogsSourceNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

// NewGetNodesIdentifierCatalogsSourceDefault creates a GetNodesIdentifierCatalogsSourceDefault with default headers values
func NewGetNodesIdentifierCatalogsSourceDefault(code int) *GetNodesIdentifierCatalogsSourceDefault {
	return &GetNodesIdentifierCatalogsSourceDefault{
		_statusCode: code,
	}
}

/*GetNodesIdentifierCatalogsSourceDefault

Unexpected error
*/
type GetNodesIdentifierCatalogsSourceDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get nodes identifier catalogs source default response
func (o *GetNodesIdentifierCatalogsSourceDefault) Code() int {
	return o._statusCode
}

func (o *GetNodesIdentifierCatalogsSourceDefault) Error() string {
	return fmt.Sprintf("[GET /nodes/{identifier}/catalogs/{source}][%d] GetNodesIdentifierCatalogsSource default  %+v", o._statusCode, o.Payload)
}

func (o *GetNodesIdentifierCatalogsSourceDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*GetNodesIdentifierCatalogsSourceOKBodyBody GetNodesIdentifierCatalogsSourceOKBodyBody get nodes identifier catalogs source o k body body

swagger:model GetNodesIdentifierCatalogsSourceOKBodyBody
*/
type GetNodesIdentifierCatalogsSourceOKBodyBody interface{}
