package lookups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new lookups API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lookups API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*find all


find all

*/
func (a *Client) GetLookups(params *GetLookupsParams) (*GetLookupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLookupsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetLookups",
		Params: params,
		Reader: &GetLookupsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLookupsOK), nil
}

/*lookup id


lookup id

*/
func (a *Client) GetLookupsID(params *GetLookupsIDParams) (*GetLookupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLookupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetLookupsID",
		Params: params,
		Reader: &GetLookupsIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLookupsIDOK), nil
}

/*find all


put all

*/
func (a *Client) PostLookups(params *PostLookupsParams) (*PostLookupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLookupsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostLookups",
		Params: params,
		Reader: &PostLookupsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLookupsOK), nil
}

/*post id


post id

*/
func (a *Client) PostLookupsID(params *PostLookupsIDParams) (*PostLookupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLookupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PostLookupsID",
		Params: params,
		Reader: &PostLookupsIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLookupsIDOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
