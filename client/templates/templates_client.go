package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new templates API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Get data for the specific poller


Get data for the specific poller

*/
func (a *Client) GetPollersIdentifierData(params *GetPollersIdentifierDataParams) (*GetPollersIdentifierDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersIdentifierDataParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetPollersIdentifierData",
		Params: params,
		Reader: &GetPollersIdentifierDataReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersIdentifierDataOK), nil
}

/*get list of possible templates


get list of possible templates

*/
func (a *Client) GetTemplatesLibrary(params *GetTemplatesLibraryParams) (*GetTemplatesLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesLibraryParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetTemplatesLibrary",
		Params: params,
		Reader: &GetTemplatesLibraryReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesLibraryOK), nil
}

/*get a single template


get a single template

*/
func (a *Client) GetTemplatesLibraryIdentifier(params *GetTemplatesLibraryIdentifierParams) (*GetTemplatesLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "GetTemplatesLibraryIdentifier",
		Params: params,
		Reader: &GetTemplatesLibraryIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesLibraryIdentifierOK), nil
}

/*put a single template


put a single template

*/
func (a *Client) PutTemplatesLibraryIdentifier(params *PutTemplatesLibraryIdentifierParams) (*PutTemplatesLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTemplatesLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:     "PutTemplatesLibraryIdentifier",
		Params: params,
		Reader: &PutTemplatesLibraryIdentifierReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTemplatesLibraryIdentifierOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
